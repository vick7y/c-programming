Grading at Tue May  4 20:51:31 UTC 2021
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==1040== Memcheck, a memory error detector
==1040== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1040== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1040== Command: ./test-eval inp.1.txt
==1040== Parent PID: 1039
==1040== 
==1040== Invalid read of size 8
==1040==    at 0x401A61: build_hand_from_match (eval.c:189)
==1040==    by 0x402445: evaluate_hand (eval.c:365)
==1040==    by 0x40282D: describe_hand (test-eval.c:68)
==1040==    by 0x402A58: main (test-eval.c:116)
==1040==  Address 0x520a308 is 0 bytes after a block of size 40 alloc'd
==1040==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1040==    by 0x401076: add_card_to (deck-c4.c:29)
==1040==    by 0x40318B: hand_from_string (input.c:49)
==1040==    by 0x4029DD: main (test-eval.c:110)
==1040== 
==1040== Invalid read of size 4
==1040==    at 0x401A64: build_hand_from_match (eval.c:189)
==1040==    by 0x402445: evaluate_hand (eval.c:365)
==1040==    by 0x40282D: describe_hand (test-eval.c:68)
==1040==    by 0x402A58: main (test-eval.c:116)
==1040==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1040== 
==1040== 
==1040== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1040==  Access not within mapped region at address 0x0
==1040==    at 0x401A64: build_hand_from_match (eval.c:189)
==1040==    by 0x402445: evaluate_hand (eval.c:365)
==1040==    by 0x40282D: describe_hand (test-eval.c:68)
==1040==    by 0x402A58: main (test-eval.c:116)
==1040==  If you believe this happened as a result of a stack
==1040==  overflow in your program's main thread (unlikely but
==1040==  possible), you can try to increase the size of the
==1040==  main thread stack using the --main-stacksize= flag.
==1040==  The main thread stack size used in this run was 8388608.
==1040== 
==1040== HEAP SUMMARY:
==1040==     in use at exit: 864 bytes in 16 blocks
==1040==   total heap usage: 202 allocs, 186 frees, 12,472 bytes allocated
==1040== 
==1040== LEAK SUMMARY:
==1040==    definitely lost: 0 bytes in 0 blocks
==1040==    indirectly lost: 0 bytes in 0 blocks
==1040==      possibly lost: 0 bytes in 0 blocks
==1040==    still reachable: 864 bytes in 16 blocks
==1040==         suppressed: 0 bytes in 0 blocks
==1040== Rerun with --leak-check=full to see details of leaked memory
==1040== 
==1040== For counts of detected and suppressed errors, rerun with: -v
==1040== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==1057== Memcheck, a memory error detector
==1057== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1057== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1057== Command: ./test-eval inp.3.txt
==1057== Parent PID: 1056
==1057== 
==1057== Invalid read of size 8
==1057==    at 0x4018FE: is_ace_low_straight_at (eval.c:151)
==1057==    by 0x4019A6: is_straight_at (eval.c:170)
==1057==    by 0x4026B2: describe_hand (test-eval.c:49)
==1057==    by 0x402A58: main (test-eval.c:116)
==1057==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==1057==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1057==    by 0x401076: add_card_to (deck-c4.c:29)
==1057==    by 0x40318B: hand_from_string (input.c:49)
==1057==    by 0x4029DD: main (test-eval.c:110)
==1057== 
==1057== Invalid read of size 4
==1057==    at 0x401901: is_ace_low_straight_at (eval.c:151)
==1057==    by 0x4019A6: is_straight_at (eval.c:170)
==1057==    by 0x4026B2: describe_hand (test-eval.c:49)
==1057==    by 0x402A58: main (test-eval.c:116)
==1057==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1057== 
==1057== 
==1057== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1057==  Access not within mapped region at address 0x0
==1057==    at 0x401901: is_ace_low_straight_at (eval.c:151)
==1057==    by 0x4019A6: is_straight_at (eval.c:170)
==1057==    by 0x4026B2: describe_hand (test-eval.c:49)
==1057==    by 0x402A58: main (test-eval.c:116)
==1057==  If you believe this happened as a result of a stack
==1057==  overflow in your program's main thread (unlikely but
==1057==  possible), you can try to increase the size of the
==1057==  main thread stack using the --main-stacksize= flag.
==1057==  The main thread stack size used in this run was 8388608.
==1057== 
==1057== HEAP SUMMARY:
==1057==     in use at exit: 864 bytes in 16 blocks
==1057==   total heap usage: 26 allocs, 10 frees, 9,216 bytes allocated
==1057== 
==1057== LEAK SUMMARY:
==1057==    definitely lost: 0 bytes in 0 blocks
==1057==    indirectly lost: 0 bytes in 0 blocks
==1057==      possibly lost: 0 bytes in 0 blocks
==1057==    still reachable: 864 bytes in 16 blocks
==1057==         suppressed: 0 bytes in 0 blocks
==1057== Rerun with --leak-check=full to see details of leaked memory
==1057== 
==1057== For counts of detected and suppressed errors, rerun with: -v
==1057== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 5: Trying hands with straights
Valgrind returned an error status
==1074== Memcheck, a memory error detector
==1074== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1074== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1074== Command: ./test-eval inp.5.txt
==1074== Parent PID: 1073
==1074== 
==1074== Invalid read of size 8
==1074==    at 0x4018FE: is_ace_low_straight_at (eval.c:151)
==1074==    by 0x4019A6: is_straight_at (eval.c:170)
==1074==    by 0x4026B2: describe_hand (test-eval.c:49)
==1074==    by 0x402A58: main (test-eval.c:116)
==1074==  Address 0x520bac8 is 0 bytes after a block of size 40 alloc'd
==1074==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1074==    by 0x401076: add_card_to (deck-c4.c:29)
==1074==    by 0x40318B: hand_from_string (input.c:49)
==1074==    by 0x4029DD: main (test-eval.c:110)
==1074== 
==1074== Invalid read of size 4
==1074==    at 0x401901: is_ace_low_straight_at (eval.c:151)
==1074==    by 0x4019A6: is_straight_at (eval.c:170)
==1074==    by 0x4026B2: describe_hand (test-eval.c:49)
==1074==    by 0x402A58: main (test-eval.c:116)
==1074==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1074== 
==1074== 
==1074== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1074==  Access not within mapped region at address 0x0
==1074==    at 0x401901: is_ace_low_straight_at (eval.c:151)
==1074==    by 0x4019A6: is_straight_at (eval.c:170)
==1074==    by 0x4026B2: describe_hand (test-eval.c:49)
==1074==    by 0x402A58: main (test-eval.c:116)
==1074==  If you believe this happened as a result of a stack
==1074==  overflow in your program's main thread (unlikely but
==1074==  possible), you can try to increase the size of the
==1074==  main thread stack using the --main-stacksize= flag.
==1074==  The main thread stack size used in this run was 8388608.
==1074== 
==1074== HEAP SUMMARY:
==1074==     in use at exit: 864 bytes in 16 blocks
==1074==   total heap usage: 266 allocs, 250 frees, 13,880 bytes allocated
==1074== 
==1074== LEAK SUMMARY:
==1074==    definitely lost: 0 bytes in 0 blocks
==1074==    indirectly lost: 0 bytes in 0 blocks
==1074==      possibly lost: 0 bytes in 0 blocks
==1074==    still reachable: 864 bytes in 16 blocks
==1074==         suppressed: 0 bytes in 0 blocks
==1074== Rerun with --leak-check=full to see details of leaked memory
==1074== 
==1074== For counts of detected and suppressed errors, rerun with: -v
==1074== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==1091== Memcheck, a memory error detector
==1091== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1091== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1091== Command: ./test-eval inp.7.txt
==1091== Parent PID: 1090
==1091== 
==1091== Invalid read of size 8
==1091==    at 0x4014C7: card_ptr_comp (eval.c:10)
==1091==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1091==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1091==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1091==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1091==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1091==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1091==    by 0x4E7369E: qsort_r (msort.c:297)
==1091==    by 0x401B55: compare_hands (eval.c:209)
==1091==    by 0x402ACD: main (test-eval.c:124)
==1091==  Address 0x5210f40 is 0 bytes after a block of size 48 alloc'd
==1091==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1091==    by 0x401076: add_card_to (deck-c4.c:29)
==1091==    by 0x40318B: hand_from_string (input.c:49)
==1091==    by 0x402AA1: main (test-eval.c:122)
==1091== 
==1091== Invalid read of size 4
==1091==    at 0x4014CA: card_ptr_comp (eval.c:10)
==1091==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1091==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1091==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1091==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1091==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1091==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1091==    by 0x4E7369E: qsort_r (msort.c:297)
==1091==    by 0x401B55: compare_hands (eval.c:209)
==1091==    by 0x402ACD: main (test-eval.c:124)
==1091==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1091== 
==1091== 
==1091== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1091==  Access not within mapped region at address 0x0
==1091==    at 0x4014CA: card_ptr_comp (eval.c:10)
==1091==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1091==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1091==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1091==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1091==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1091==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1091==    by 0x4E7369E: qsort_r (msort.c:297)
==1091==    by 0x401B55: compare_hands (eval.c:209)
==1091==    by 0x402ACD: main (test-eval.c:124)
==1091==  If you believe this happened as a result of a stack
==1091==  overflow in your program's main thread (unlikely but
==1091==  possible), you can try to increase the size of the
==1091==  main thread stack using the --main-stacksize= flag.
==1091==  The main thread stack size used in this run was 8388608.
==1091== 
==1091== HEAP SUMMARY:
==1091==     in use at exit: 912 bytes in 19 blocks
==1091==   total heap usage: 510 allocs, 491 frees, 18,928 bytes allocated
==1091== 
==1091== LEAK SUMMARY:
==1091==    definitely lost: 0 bytes in 0 blocks
==1091==    indirectly lost: 0 bytes in 0 blocks
==1091==      possibly lost: 0 bytes in 0 blocks
==1091==    still reachable: 912 bytes in 19 blocks
==1091==         suppressed: 0 bytes in 0 blocks
==1091== Rerun with --leak-check=full to see details of leaked memory
==1091== 
==1091== For counts of detected and suppressed errors, rerun with: -v
==1091== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==1108== Memcheck, a memory error detector
==1108== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1108== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1108== Command: ./test-eval inp.9.txt
==1108== Parent PID: 1107
==1108== 
==1108== Invalid read of size 8
==1108==    at 0x4018FE: is_ace_low_straight_at (eval.c:151)
==1108==    by 0x4019A6: is_straight_at (eval.c:170)
==1108==    by 0x40267B: describe_hand (test-eval.c:46)
==1108==    by 0x402A58: main (test-eval.c:116)
==1108==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==1108==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1108==    by 0x401076: add_card_to (deck-c4.c:29)
==1108==    by 0x40318B: hand_from_string (input.c:49)
==1108==    by 0x4029DD: main (test-eval.c:110)
==1108== 
==1108== Invalid read of size 4
==1108==    at 0x401901: is_ace_low_straight_at (eval.c:151)
==1108==    by 0x4019A6: is_straight_at (eval.c:170)
==1108==    by 0x40267B: describe_hand (test-eval.c:46)
==1108==    by 0x402A58: main (test-eval.c:116)
==1108==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1108== 
==1108== 
==1108== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1108==  Access not within mapped region at address 0x0
==1108==    at 0x401901: is_ace_low_straight_at (eval.c:151)
==1108==    by 0x4019A6: is_straight_at (eval.c:170)
==1108==    by 0x40267B: describe_hand (test-eval.c:46)
==1108==    by 0x402A58: main (test-eval.c:116)
==1108==  If you believe this happened as a result of a stack
==1108==  overflow in your program's main thread (unlikely but
==1108==  possible), you can try to increase the size of the
==1108==  main thread stack using the --main-stacksize= flag.
==1108==  The main thread stack size used in this run was 8388608.
==1108== 
==1108== HEAP SUMMARY:
==1108==     in use at exit: 864 bytes in 16 blocks
==1108==   total heap usage: 26 allocs, 10 frees, 9,216 bytes allocated
==1108== 
==1108== LEAK SUMMARY:
==1108==    definitely lost: 0 bytes in 0 blocks
==1108==    indirectly lost: 0 bytes in 0 blocks
==1108==      possibly lost: 0 bytes in 0 blocks
==1108==    still reachable: 864 bytes in 16 blocks
==1108==         suppressed: 0 bytes in 0 blocks
==1108== Rerun with --leak-check=full to see details of leaked memory
==1108== 
==1108== For counts of detected and suppressed errors, rerun with: -v
==1108== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==1113== Memcheck, a memory error detector
==1113== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1113== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1113== Command: ./test-eval inp.10.txt
==1113== Parent PID: 1112
==1113== 
==1113== Invalid read of size 8
==1113==    at 0x4014C7: card_ptr_comp (eval.c:10)
==1113==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1113==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1113==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1113==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1113==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1113==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1113==    by 0x4E7369E: qsort_r (msort.c:297)
==1113==    by 0x401B55: compare_hands (eval.c:209)
==1113==    by 0x402ACD: main (test-eval.c:124)
==1113==  Address 0x5208700 is 0 bytes after a block of size 48 alloc'd
==1113==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1113==    by 0x401076: add_card_to (deck-c4.c:29)
==1113==    by 0x40318B: hand_from_string (input.c:49)
==1113==    by 0x402AA1: main (test-eval.c:122)
==1113== 
==1113== Invalid read of size 4
==1113==    at 0x4014CA: card_ptr_comp (eval.c:10)
==1113==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1113==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1113==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1113==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1113==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1113==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1113==    by 0x4E7369E: qsort_r (msort.c:297)
==1113==    by 0x401B55: compare_hands (eval.c:209)
==1113==    by 0x402ACD: main (test-eval.c:124)
==1113==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1113== 
==1113== 
==1113== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1113==  Access not within mapped region at address 0x0
==1113==    at 0x4014CA: card_ptr_comp (eval.c:10)
==1113==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1113==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1113==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1113==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1113==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1113==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1113==    by 0x4E7369E: qsort_r (msort.c:297)
==1113==    by 0x401B55: compare_hands (eval.c:209)
==1113==    by 0x402ACD: main (test-eval.c:124)
==1113==  If you believe this happened as a result of a stack
==1113==  overflow in your program's main thread (unlikely but
==1113==  possible), you can try to increase the size of the
==1113==  main thread stack using the --main-stacksize= flag.
==1113==  The main thread stack size used in this run was 8388608.
==1113== 
==1113== HEAP SUMMARY:
==1113==     in use at exit: 912 bytes in 19 blocks
==1113==   total heap usage: 122 allocs, 103 frees, 11,096 bytes allocated
==1113== 
==1113== LEAK SUMMARY:
==1113==    definitely lost: 0 bytes in 0 blocks
==1113==    indirectly lost: 0 bytes in 0 blocks
==1113==      possibly lost: 0 bytes in 0 blocks
==1113==    still reachable: 912 bytes in 19 blocks
==1113==         suppressed: 0 bytes in 0 blocks
==1113== Rerun with --leak-check=full to see details of leaked memory
==1113== 
==1113== For counts of detected and suppressed errors, rerun with: -v
==1113== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
