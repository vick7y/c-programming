Grading at Tue May  4 20:11:24 UTC 2021
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==543== Memcheck, a memory error detector
==543== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==543== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==543== Command: ./test-eval inp.1.txt
==543== Parent PID: 542
==543== 
==543== Invalid read of size 8
==543==    at 0x4016E6: find_secondary_pair (eval.c:81)
==543==    by 0x402787: describe_hand (test-eval.c:57)
==543==    by 0x402A62: main (test-eval.c:116)
==543==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==543==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==543==    by 0x401076: add_card_to (deck-c4.c:29)
==543==    by 0x403195: hand_from_string (input.c:49)
==543==    by 0x4029E7: main (test-eval.c:110)
==543== 
==543== Invalid read of size 8
==543==    at 0x4016E9: find_secondary_pair (eval.c:81)
==543==    by 0x402787: describe_hand (test-eval.c:57)
==543==    by 0x402A62: main (test-eval.c:116)
==543==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==543== 
==543== 
==543== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==543==  Access not within mapped region at address 0x0
==543==    at 0x4016E9: find_secondary_pair (eval.c:81)
==543==    by 0x402787: describe_hand (test-eval.c:57)
==543==    by 0x402A62: main (test-eval.c:116)
==543==  If you believe this happened as a result of a stack
==543==  overflow in your program's main thread (unlikely but
==543==  possible), you can try to increase the size of the
==543==  main thread stack using the --main-stacksize= flag.
==543==  The main thread stack size used in this run was 8388608.
==543== 
==543== HEAP SUMMARY:
==543==     in use at exit: 920 bytes in 19 blocks
==543==   total heap usage: 31 allocs, 12 frees, 9,352 bytes allocated
==543== 
==543== LEAK SUMMARY:
==543==    definitely lost: 0 bytes in 0 blocks
==543==    indirectly lost: 0 bytes in 0 blocks
==543==      possibly lost: 0 bytes in 0 blocks
==543==    still reachable: 920 bytes in 19 blocks
==543==         suppressed: 0 bytes in 0 blocks
==543== Rerun with --leak-check=full to see details of leaked memory
==543== 
==543== For counts of detected and suppressed errors, rerun with: -v
==543== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==548== Memcheck, a memory error detector
==548== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==548== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==548== Command: ./test-eval inp.2.txt
==548== Parent PID: 547
==548== 
==548== Invalid read of size 8
==548==    at 0x4016E6: find_secondary_pair (eval.c:81)
==548==    by 0x402787: describe_hand (test-eval.c:57)
==548==    by 0x402A62: main (test-eval.c:116)
==548==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==548==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==548==    by 0x401076: add_card_to (deck-c4.c:29)
==548==    by 0x403195: hand_from_string (input.c:49)
==548==    by 0x4029E7: main (test-eval.c:110)
==548== 
==548== Invalid read of size 8
==548==    at 0x4016E9: find_secondary_pair (eval.c:81)
==548==    by 0x402787: describe_hand (test-eval.c:57)
==548==    by 0x402A62: main (test-eval.c:116)
==548==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==548== 
==548== 
==548== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==548==  Access not within mapped region at address 0x0
==548==    at 0x4016E9: find_secondary_pair (eval.c:81)
==548==    by 0x402787: describe_hand (test-eval.c:57)
==548==    by 0x402A62: main (test-eval.c:116)
==548==  If you believe this happened as a result of a stack
==548==  overflow in your program's main thread (unlikely but
==548==  possible), you can try to increase the size of the
==548==  main thread stack using the --main-stacksize= flag.
==548==  The main thread stack size used in this run was 8388608.
==548== 
==548== HEAP SUMMARY:
==548==     in use at exit: 904 bytes in 18 blocks
==548==   total heap usage: 29 allocs, 11 frees, 9,296 bytes allocated
==548== 
==548== LEAK SUMMARY:
==548==    definitely lost: 0 bytes in 0 blocks
==548==    indirectly lost: 0 bytes in 0 blocks
==548==      possibly lost: 0 bytes in 0 blocks
==548==    still reachable: 904 bytes in 18 blocks
==548==         suppressed: 0 bytes in 0 blocks
==548== Rerun with --leak-check=full to see details of leaked memory
==548== 
==548== For counts of detected and suppressed errors, rerun with: -v
==548== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==553== Memcheck, a memory error detector
==553== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==553== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==553== Command: ./test-eval inp.3.txt
==553== Parent PID: 552
==553== 
==553== Invalid read of size 8
==553==    at 0x401908: is_ace_low_straight_at (eval.c:149)
==553==    by 0x4019B0: is_straight_at (eval.c:168)
==553==    by 0x4026BC: describe_hand (test-eval.c:49)
==553==    by 0x402A62: main (test-eval.c:116)
==553==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==553==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==553==    by 0x401076: add_card_to (deck-c4.c:29)
==553==    by 0x403195: hand_from_string (input.c:49)
==553==    by 0x4029E7: main (test-eval.c:110)
==553== 
==553== Invalid read of size 4
==553==    at 0x40190B: is_ace_low_straight_at (eval.c:149)
==553==    by 0x4019B0: is_straight_at (eval.c:168)
==553==    by 0x4026BC: describe_hand (test-eval.c:49)
==553==    by 0x402A62: main (test-eval.c:116)
==553==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==553== 
==553== 
==553== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==553==  Access not within mapped region at address 0x0
==553==    at 0x40190B: is_ace_low_straight_at (eval.c:149)
==553==    by 0x4019B0: is_straight_at (eval.c:168)
==553==    by 0x4026BC: describe_hand (test-eval.c:49)
==553==    by 0x402A62: main (test-eval.c:116)
==553==  If you believe this happened as a result of a stack
==553==  overflow in your program's main thread (unlikely but
==553==  possible), you can try to increase the size of the
==553==  main thread stack using the --main-stacksize= flag.
==553==  The main thread stack size used in this run was 8388608.
==553== 
==553== HEAP SUMMARY:
==553==     in use at exit: 864 bytes in 16 blocks
==553==   total heap usage: 26 allocs, 10 frees, 9,216 bytes allocated
==553== 
==553== LEAK SUMMARY:
==553==    definitely lost: 0 bytes in 0 blocks
==553==    indirectly lost: 0 bytes in 0 blocks
==553==      possibly lost: 0 bytes in 0 blocks
==553==    still reachable: 864 bytes in 16 blocks
==553==         suppressed: 0 bytes in 0 blocks
==553== Rerun with --leak-check=full to see details of leaked memory
==553== 
==553== For counts of detected and suppressed errors, rerun with: -v
==553== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==558== Memcheck, a memory error detector
==558== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==558== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==558== Command: ./test-eval inp.4.txt
==558== Parent PID: 557
==558== 
==558== Invalid read of size 8
==558==    at 0x4016E6: find_secondary_pair (eval.c:81)
==558==    by 0x402787: describe_hand (test-eval.c:57)
==558==    by 0x402A62: main (test-eval.c:116)
==558==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==558==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==558==    by 0x401076: add_card_to (deck-c4.c:29)
==558==    by 0x403195: hand_from_string (input.c:49)
==558==    by 0x4029E7: main (test-eval.c:110)
==558== 
==558== Invalid read of size 8
==558==    at 0x4016E9: find_secondary_pair (eval.c:81)
==558==    by 0x402787: describe_hand (test-eval.c:57)
==558==    by 0x402A62: main (test-eval.c:116)
==558==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==558== 
==558== 
==558== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==558==  Access not within mapped region at address 0x0
==558==    at 0x4016E9: find_secondary_pair (eval.c:81)
==558==    by 0x402787: describe_hand (test-eval.c:57)
==558==    by 0x402A62: main (test-eval.c:116)
==558==  If you believe this happened as a result of a stack
==558==  overflow in your program's main thread (unlikely but
==558==  possible), you can try to increase the size of the
==558==  main thread stack using the --main-stacksize= flag.
==558==  The main thread stack size used in this run was 8388608.
==558== 
==558== HEAP SUMMARY:
==558==     in use at exit: 920 bytes in 19 blocks
==558==   total heap usage: 31 allocs, 12 frees, 9,352 bytes allocated
==558== 
==558== LEAK SUMMARY:
==558==    definitely lost: 0 bytes in 0 blocks
==558==    indirectly lost: 0 bytes in 0 blocks
==558==      possibly lost: 0 bytes in 0 blocks
==558==    still reachable: 920 bytes in 19 blocks
==558==         suppressed: 0 bytes in 0 blocks
==558== Rerun with --leak-check=full to see details of leaked memory
==558== 
==558== For counts of detected and suppressed errors, rerun with: -v
==558== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==563== Memcheck, a memory error detector
==563== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==563== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==563== Command: ./test-eval inp.5.txt
==563== Parent PID: 562
==563== 
==563== Invalid read of size 8
==563==    at 0x4016E6: find_secondary_pair (eval.c:81)
==563==    by 0x402787: describe_hand (test-eval.c:57)
==563==    by 0x402A62: main (test-eval.c:116)
==563==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==563==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==563==    by 0x401076: add_card_to (deck-c4.c:29)
==563==    by 0x403195: hand_from_string (input.c:49)
==563==    by 0x4029E7: main (test-eval.c:110)
==563== 
==563== Invalid read of size 8
==563==    at 0x4016E9: find_secondary_pair (eval.c:81)
==563==    by 0x402787: describe_hand (test-eval.c:57)
==563==    by 0x402A62: main (test-eval.c:116)
==563==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==563== 
==563== 
==563== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==563==  Access not within mapped region at address 0x0
==563==    at 0x4016E9: find_secondary_pair (eval.c:81)
==563==    by 0x402787: describe_hand (test-eval.c:57)
==563==    by 0x402A62: main (test-eval.c:116)
==563==  If you believe this happened as a result of a stack
==563==  overflow in your program's main thread (unlikely but
==563==  possible), you can try to increase the size of the
==563==  main thread stack using the --main-stacksize= flag.
==563==  The main thread stack size used in this run was 8388608.
==563== 
==563== HEAP SUMMARY:
==563==     in use at exit: 884 bytes in 17 blocks
==563==   total heap usage: 27 allocs, 10 frees, 9,236 bytes allocated
==563== 
==563== LEAK SUMMARY:
==563==    definitely lost: 0 bytes in 0 blocks
==563==    indirectly lost: 0 bytes in 0 blocks
==563==      possibly lost: 0 bytes in 0 blocks
==563==    still reachable: 884 bytes in 17 blocks
==563==         suppressed: 0 bytes in 0 blocks
==563== Rerun with --leak-check=full to see details of leaked memory
==563== 
==563== For counts of detected and suppressed errors, rerun with: -v
==563== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==568== Memcheck, a memory error detector
==568== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==568== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==568== Command: ./test-eval inp.6.txt
==568== Parent PID: 567
==568== 
==568== Invalid read of size 8
==568==    at 0x4016E6: find_secondary_pair (eval.c:81)
==568==    by 0x402787: describe_hand (test-eval.c:57)
==568==    by 0x402A62: main (test-eval.c:116)
==568==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==568==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==568==    by 0x401076: add_card_to (deck-c4.c:29)
==568==    by 0x403195: hand_from_string (input.c:49)
==568==    by 0x4029E7: main (test-eval.c:110)
==568== 
==568== Invalid read of size 8
==568==    at 0x4016E9: find_secondary_pair (eval.c:81)
==568==    by 0x402787: describe_hand (test-eval.c:57)
==568==    by 0x402A62: main (test-eval.c:116)
==568==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==568== 
==568== 
==568== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==568==  Access not within mapped region at address 0x0
==568==    at 0x4016E9: find_secondary_pair (eval.c:81)
==568==    by 0x402787: describe_hand (test-eval.c:57)
==568==    by 0x402A62: main (test-eval.c:116)
==568==  If you believe this happened as a result of a stack
==568==  overflow in your program's main thread (unlikely but
==568==  possible), you can try to increase the size of the
==568==  main thread stack using the --main-stacksize= flag.
==568==  The main thread stack size used in this run was 8388608.
==568== 
==568== HEAP SUMMARY:
==568==     in use at exit: 920 bytes in 19 blocks
==568==   total heap usage: 31 allocs, 12 frees, 9,352 bytes allocated
==568== 
==568== LEAK SUMMARY:
==568==    definitely lost: 0 bytes in 0 blocks
==568==    indirectly lost: 0 bytes in 0 blocks
==568==      possibly lost: 0 bytes in 0 blocks
==568==    still reachable: 920 bytes in 19 blocks
==568==         suppressed: 0 bytes in 0 blocks
==568== Rerun with --leak-check=full to see details of leaked memory
==568== 
==568== For counts of detected and suppressed errors, rerun with: -v
==568== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==573== Memcheck, a memory error detector
==573== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==573== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==573== Command: ./test-eval inp.7.txt
==573== Parent PID: 572
==573== 
==573== Invalid read of size 8
==573==    at 0x4014C7: card_ptr_comp (eval.c:10)
==573==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==573==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==573==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==573==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==573==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==573==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==573==    by 0x4E7369E: qsort_r (msort.c:297)
==573==    by 0x401B5F: compare_hands (eval.c:207)
==573==    by 0x402AD7: main (test-eval.c:124)
==573==  Address 0x5210f40 is 0 bytes after a block of size 48 alloc'd
==573==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==573==    by 0x401076: add_card_to (deck-c4.c:29)
==573==    by 0x403195: hand_from_string (input.c:49)
==573==    by 0x402AAB: main (test-eval.c:122)
==573== 
==573== Invalid read of size 4
==573==    at 0x4014CA: card_ptr_comp (eval.c:10)
==573==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==573==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==573==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==573==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==573==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==573==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==573==    by 0x4E7369E: qsort_r (msort.c:297)
==573==    by 0x401B5F: compare_hands (eval.c:207)
==573==    by 0x402AD7: main (test-eval.c:124)
==573==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==573== 
==573== 
==573== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==573==  Access not within mapped region at address 0x0
==573==    at 0x4014CA: card_ptr_comp (eval.c:10)
==573==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==573==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==573==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==573==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==573==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==573==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==573==    by 0x4E7369E: qsort_r (msort.c:297)
==573==    by 0x401B5F: compare_hands (eval.c:207)
==573==    by 0x402AD7: main (test-eval.c:124)
==573==  If you believe this happened as a result of a stack
==573==  overflow in your program's main thread (unlikely but
==573==  possible), you can try to increase the size of the
==573==  main thread stack using the --main-stacksize= flag.
==573==  The main thread stack size used in this run was 8388608.
==573== 
==573== HEAP SUMMARY:
==573==     in use at exit: 912 bytes in 19 blocks
==573==   total heap usage: 510 allocs, 491 frees, 18,928 bytes allocated
==573== 
==573== LEAK SUMMARY:
==573==    definitely lost: 0 bytes in 0 blocks
==573==    indirectly lost: 0 bytes in 0 blocks
==573==      possibly lost: 0 bytes in 0 blocks
==573==    still reachable: 912 bytes in 19 blocks
==573==         suppressed: 0 bytes in 0 blocks
==573== Rerun with --leak-check=full to see details of leaked memory
==573== 
==573== For counts of detected and suppressed errors, rerun with: -v
==573== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==578== Memcheck, a memory error detector
==578== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==578== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==578== Command: ./test-eval inp.8.txt
==578== Parent PID: 577
==578== 
==578== Invalid read of size 8
==578==    at 0x4016E6: find_secondary_pair (eval.c:81)
==578==    by 0x402787: describe_hand (test-eval.c:57)
==578==    by 0x402A62: main (test-eval.c:116)
==578==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==578==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==578==    by 0x401076: add_card_to (deck-c4.c:29)
==578==    by 0x403195: hand_from_string (input.c:49)
==578==    by 0x4029E7: main (test-eval.c:110)
==578== 
==578== Invalid read of size 8
==578==    at 0x4016E9: find_secondary_pair (eval.c:81)
==578==    by 0x402787: describe_hand (test-eval.c:57)
==578==    by 0x402A62: main (test-eval.c:116)
==578==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==578== 
==578== 
==578== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==578==  Access not within mapped region at address 0x0
==578==    at 0x4016E9: find_secondary_pair (eval.c:81)
==578==    by 0x402787: describe_hand (test-eval.c:57)
==578==    by 0x402A62: main (test-eval.c:116)
==578==  If you believe this happened as a result of a stack
==578==  overflow in your program's main thread (unlikely but
==578==  possible), you can try to increase the size of the
==578==  main thread stack using the --main-stacksize= flag.
==578==  The main thread stack size used in this run was 8388608.
==578== 
==578== HEAP SUMMARY:
==578==     in use at exit: 920 bytes in 19 blocks
==578==   total heap usage: 31 allocs, 12 frees, 9,352 bytes allocated
==578== 
==578== LEAK SUMMARY:
==578==    definitely lost: 0 bytes in 0 blocks
==578==    indirectly lost: 0 bytes in 0 blocks
==578==      possibly lost: 0 bytes in 0 blocks
==578==    still reachable: 920 bytes in 19 blocks
==578==         suppressed: 0 bytes in 0 blocks
==578== Rerun with --leak-check=full to see details of leaked memory
==578== 
==578== For counts of detected and suppressed errors, rerun with: -v
==578== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==583== Memcheck, a memory error detector
==583== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==583== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==583== Command: ./test-eval inp.9.txt
==583== Parent PID: 582
==583== 
==583== Invalid read of size 8
==583==    at 0x401908: is_ace_low_straight_at (eval.c:149)
==583==    by 0x4019B0: is_straight_at (eval.c:168)
==583==    by 0x402685: describe_hand (test-eval.c:46)
==583==    by 0x402A62: main (test-eval.c:116)
==583==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==583==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==583==    by 0x401076: add_card_to (deck-c4.c:29)
==583==    by 0x403195: hand_from_string (input.c:49)
==583==    by 0x4029E7: main (test-eval.c:110)
==583== 
==583== Invalid read of size 4
==583==    at 0x40190B: is_ace_low_straight_at (eval.c:149)
==583==    by 0x4019B0: is_straight_at (eval.c:168)
==583==    by 0x402685: describe_hand (test-eval.c:46)
==583==    by 0x402A62: main (test-eval.c:116)
==583==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==583== 
==583== 
==583== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==583==  Access not within mapped region at address 0x0
==583==    at 0x40190B: is_ace_low_straight_at (eval.c:149)
==583==    by 0x4019B0: is_straight_at (eval.c:168)
==583==    by 0x402685: describe_hand (test-eval.c:46)
==583==    by 0x402A62: main (test-eval.c:116)
==583==  If you believe this happened as a result of a stack
==583==  overflow in your program's main thread (unlikely but
==583==  possible), you can try to increase the size of the
==583==  main thread stack using the --main-stacksize= flag.
==583==  The main thread stack size used in this run was 8388608.
==583== 
==583== HEAP SUMMARY:
==583==     in use at exit: 864 bytes in 16 blocks
==583==   total heap usage: 26 allocs, 10 frees, 9,216 bytes allocated
==583== 
==583== LEAK SUMMARY:
==583==    definitely lost: 0 bytes in 0 blocks
==583==    indirectly lost: 0 bytes in 0 blocks
==583==      possibly lost: 0 bytes in 0 blocks
==583==    still reachable: 864 bytes in 16 blocks
==583==         suppressed: 0 bytes in 0 blocks
==583== Rerun with --leak-check=full to see details of leaked memory
==583== 
==583== For counts of detected and suppressed errors, rerun with: -v
==583== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==588== Memcheck, a memory error detector
==588== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==588== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==588== Command: ./test-eval inp.10.txt
==588== Parent PID: 587
==588== 
==588== Invalid read of size 8
==588==    at 0x4016E6: find_secondary_pair (eval.c:81)
==588==    by 0x402787: describe_hand (test-eval.c:57)
==588==    by 0x402A62: main (test-eval.c:116)
==588==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==588==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==588==    by 0x401076: add_card_to (deck-c4.c:29)
==588==    by 0x403195: hand_from_string (input.c:49)
==588==    by 0x4029E7: main (test-eval.c:110)
==588== 
==588== Invalid read of size 8
==588==    at 0x4016E9: find_secondary_pair (eval.c:81)
==588==    by 0x402787: describe_hand (test-eval.c:57)
==588==    by 0x402A62: main (test-eval.c:116)
==588==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==588== 
==588== 
==588== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==588==  Access not within mapped region at address 0x0
==588==    at 0x4016E9: find_secondary_pair (eval.c:81)
==588==    by 0x402787: describe_hand (test-eval.c:57)
==588==    by 0x402A62: main (test-eval.c:116)
==588==  If you believe this happened as a result of a stack
==588==  overflow in your program's main thread (unlikely but
==588==  possible), you can try to increase the size of the
==588==  main thread stack using the --main-stacksize= flag.
==588==  The main thread stack size used in this run was 8388608.
==588== 
==588== HEAP SUMMARY:
==588==     in use at exit: 920 bytes in 19 blocks
==588==   total heap usage: 31 allocs, 12 frees, 9,352 bytes allocated
==588== 
==588== LEAK SUMMARY:
==588==    definitely lost: 0 bytes in 0 blocks
==588==    indirectly lost: 0 bytes in 0 blocks
==588==      possibly lost: 0 bytes in 0 blocks
==588==    still reachable: 920 bytes in 19 blocks
==588==         suppressed: 0 bytes in 0 blocks
==588== Rerun with --leak-check=full to see details of leaked memory
==588== 
==588== For counts of detected and suppressed errors, rerun with: -v
==588== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
