Grading at Tue May  4 20:55:57 UTC 2021
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==1265== Memcheck, a memory error detector
==1265== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1265== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1265== Command: ./test-eval inp.1.txt
==1265== Parent PID: 1264
==1265== 
==1265== Invalid read of size 8
==1265==    at 0x401A61: build_hand_from_match (eval.c:189)
==1265==    by 0x402445: evaluate_hand (eval.c:365)
==1265==    by 0x40282D: describe_hand (test-eval.c:68)
==1265==    by 0x402A58: main (test-eval.c:116)
==1265==  Address 0x520a308 is 0 bytes after a block of size 40 alloc'd
==1265==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1265==    by 0x401076: add_card_to (deck-c4.c:29)
==1265==    by 0x40318B: hand_from_string (input.c:49)
==1265==    by 0x4029DD: main (test-eval.c:110)
==1265== 
==1265== Invalid read of size 4
==1265==    at 0x401A64: build_hand_from_match (eval.c:189)
==1265==    by 0x402445: evaluate_hand (eval.c:365)
==1265==    by 0x40282D: describe_hand (test-eval.c:68)
==1265==    by 0x402A58: main (test-eval.c:116)
==1265==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1265== 
==1265== 
==1265== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1265==  Access not within mapped region at address 0x0
==1265==    at 0x401A64: build_hand_from_match (eval.c:189)
==1265==    by 0x402445: evaluate_hand (eval.c:365)
==1265==    by 0x40282D: describe_hand (test-eval.c:68)
==1265==    by 0x402A58: main (test-eval.c:116)
==1265==  If you believe this happened as a result of a stack
==1265==  overflow in your program's main thread (unlikely but
==1265==  possible), you can try to increase the size of the
==1265==  main thread stack using the --main-stacksize= flag.
==1265==  The main thread stack size used in this run was 8388608.
==1265== 
==1265== HEAP SUMMARY:
==1265==     in use at exit: 864 bytes in 16 blocks
==1265==   total heap usage: 202 allocs, 186 frees, 12,472 bytes allocated
==1265== 
==1265== LEAK SUMMARY:
==1265==    definitely lost: 0 bytes in 0 blocks
==1265==    indirectly lost: 0 bytes in 0 blocks
==1265==      possibly lost: 0 bytes in 0 blocks
==1265==    still reachable: 864 bytes in 16 blocks
==1265==         suppressed: 0 bytes in 0 blocks
==1265== Rerun with --leak-check=full to see details of leaked memory
==1265== 
==1265== For counts of detected and suppressed errors, rerun with: -v
==1265== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==1282== Memcheck, a memory error detector
==1282== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1282== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1282== Command: ./test-eval inp.3.txt
==1282== Parent PID: 1281
==1282== 
==1282== Invalid read of size 8
==1282==    at 0x4018FE: is_ace_low_straight_at (eval.c:151)
==1282==    by 0x4019A6: is_straight_at (eval.c:170)
==1282==    by 0x4026B2: describe_hand (test-eval.c:49)
==1282==    by 0x402A58: main (test-eval.c:116)
==1282==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==1282==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1282==    by 0x401076: add_card_to (deck-c4.c:29)
==1282==    by 0x40318B: hand_from_string (input.c:49)
==1282==    by 0x4029DD: main (test-eval.c:110)
==1282== 
==1282== Invalid read of size 4
==1282==    at 0x401901: is_ace_low_straight_at (eval.c:151)
==1282==    by 0x4019A6: is_straight_at (eval.c:170)
==1282==    by 0x4026B2: describe_hand (test-eval.c:49)
==1282==    by 0x402A58: main (test-eval.c:116)
==1282==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1282== 
==1282== 
==1282== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1282==  Access not within mapped region at address 0x0
==1282==    at 0x401901: is_ace_low_straight_at (eval.c:151)
==1282==    by 0x4019A6: is_straight_at (eval.c:170)
==1282==    by 0x4026B2: describe_hand (test-eval.c:49)
==1282==    by 0x402A58: main (test-eval.c:116)
==1282==  If you believe this happened as a result of a stack
==1282==  overflow in your program's main thread (unlikely but
==1282==  possible), you can try to increase the size of the
==1282==  main thread stack using the --main-stacksize= flag.
==1282==  The main thread stack size used in this run was 8388608.
==1282== 
==1282== HEAP SUMMARY:
==1282==     in use at exit: 864 bytes in 16 blocks
==1282==   total heap usage: 26 allocs, 10 frees, 9,216 bytes allocated
==1282== 
==1282== LEAK SUMMARY:
==1282==    definitely lost: 0 bytes in 0 blocks
==1282==    indirectly lost: 0 bytes in 0 blocks
==1282==      possibly lost: 0 bytes in 0 blocks
==1282==    still reachable: 864 bytes in 16 blocks
==1282==         suppressed: 0 bytes in 0 blocks
==1282== Rerun with --leak-check=full to see details of leaked memory
==1282== 
==1282== For counts of detected and suppressed errors, rerun with: -v
==1282== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 5: Trying hands with straights
Valgrind returned an error status
==1299== Memcheck, a memory error detector
==1299== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1299== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1299== Command: ./test-eval inp.5.txt
==1299== Parent PID: 1298
==1299== 
==1299== Invalid read of size 8
==1299==    at 0x4018FE: is_ace_low_straight_at (eval.c:151)
==1299==    by 0x4019A6: is_straight_at (eval.c:170)
==1299==    by 0x4026B2: describe_hand (test-eval.c:49)
==1299==    by 0x402A58: main (test-eval.c:116)
==1299==  Address 0x520bac8 is 0 bytes after a block of size 40 alloc'd
==1299==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1299==    by 0x401076: add_card_to (deck-c4.c:29)
==1299==    by 0x40318B: hand_from_string (input.c:49)
==1299==    by 0x4029DD: main (test-eval.c:110)
==1299== 
==1299== Invalid read of size 4
==1299==    at 0x401901: is_ace_low_straight_at (eval.c:151)
==1299==    by 0x4019A6: is_straight_at (eval.c:170)
==1299==    by 0x4026B2: describe_hand (test-eval.c:49)
==1299==    by 0x402A58: main (test-eval.c:116)
==1299==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1299== 
==1299== 
==1299== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1299==  Access not within mapped region at address 0x0
==1299==    at 0x401901: is_ace_low_straight_at (eval.c:151)
==1299==    by 0x4019A6: is_straight_at (eval.c:170)
==1299==    by 0x4026B2: describe_hand (test-eval.c:49)
==1299==    by 0x402A58: main (test-eval.c:116)
==1299==  If you believe this happened as a result of a stack
==1299==  overflow in your program's main thread (unlikely but
==1299==  possible), you can try to increase the size of the
==1299==  main thread stack using the --main-stacksize= flag.
==1299==  The main thread stack size used in this run was 8388608.
==1299== 
==1299== HEAP SUMMARY:
==1299==     in use at exit: 864 bytes in 16 blocks
==1299==   total heap usage: 266 allocs, 250 frees, 13,880 bytes allocated
==1299== 
==1299== LEAK SUMMARY:
==1299==    definitely lost: 0 bytes in 0 blocks
==1299==    indirectly lost: 0 bytes in 0 blocks
==1299==      possibly lost: 0 bytes in 0 blocks
==1299==    still reachable: 864 bytes in 16 blocks
==1299==         suppressed: 0 bytes in 0 blocks
==1299== Rerun with --leak-check=full to see details of leaked memory
==1299== 
==1299== For counts of detected and suppressed errors, rerun with: -v
==1299== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 8: Trying hands with 4 of a kind
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==1340== Memcheck, a memory error detector
==1340== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1340== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1340== Command: ./test-eval inp.9.txt
==1340== Parent PID: 1339
==1340== 
==1340== Invalid read of size 8
==1340==    at 0x4018FE: is_ace_low_straight_at (eval.c:151)
==1340==    by 0x4019A6: is_straight_at (eval.c:170)
==1340==    by 0x40267B: describe_hand (test-eval.c:46)
==1340==    by 0x402A58: main (test-eval.c:116)
==1340==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==1340==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1340==    by 0x401076: add_card_to (deck-c4.c:29)
==1340==    by 0x40318B: hand_from_string (input.c:49)
==1340==    by 0x4029DD: main (test-eval.c:110)
==1340== 
==1340== Invalid read of size 4
==1340==    at 0x401901: is_ace_low_straight_at (eval.c:151)
==1340==    by 0x4019A6: is_straight_at (eval.c:170)
==1340==    by 0x40267B: describe_hand (test-eval.c:46)
==1340==    by 0x402A58: main (test-eval.c:116)
==1340==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1340== 
==1340== 
==1340== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1340==  Access not within mapped region at address 0x0
==1340==    at 0x401901: is_ace_low_straight_at (eval.c:151)
==1340==    by 0x4019A6: is_straight_at (eval.c:170)
==1340==    by 0x40267B: describe_hand (test-eval.c:46)
==1340==    by 0x402A58: main (test-eval.c:116)
==1340==  If you believe this happened as a result of a stack
==1340==  overflow in your program's main thread (unlikely but
==1340==  possible), you can try to increase the size of the
==1340==  main thread stack using the --main-stacksize= flag.
==1340==  The main thread stack size used in this run was 8388608.
==1340== 
==1340== HEAP SUMMARY:
==1340==     in use at exit: 864 bytes in 16 blocks
==1340==   total heap usage: 26 allocs, 10 frees, 9,216 bytes allocated
==1340== 
==1340== LEAK SUMMARY:
==1340==    definitely lost: 0 bytes in 0 blocks
==1340==    indirectly lost: 0 bytes in 0 blocks
==1340==      possibly lost: 0 bytes in 0 blocks
==1340==    still reachable: 864 bytes in 16 blocks
==1340==         suppressed: 0 bytes in 0 blocks
==1340== Rerun with --leak-check=full to see details of leaked memory
==1340== 
==1340== For counts of detected and suppressed errors, rerun with: -v
==1340== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==1345== Memcheck, a memory error detector
==1345== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1345== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1345== Command: ./test-eval inp.10.txt
==1345== Parent PID: 1344
==1345== 
==1345== Invalid read of size 8
==1345==    at 0x4018FE: is_ace_low_straight_at (eval.c:151)
==1345==    by 0x4019A6: is_straight_at (eval.c:170)
==1345==    by 0x4026B2: describe_hand (test-eval.c:49)
==1345==    by 0x402A78: main (test-eval.c:119)
==1345==  Address 0x520f3d8 is 0 bytes after a block of size 40 alloc'd
==1345==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1345==    by 0x401076: add_card_to (deck-c4.c:29)
==1345==    by 0x40318B: hand_from_string (input.c:49)
==1345==    by 0x4029F2: main (test-eval.c:111)
==1345== 
==1345== Invalid read of size 4
==1345==    at 0x401901: is_ace_low_straight_at (eval.c:151)
==1345==    by 0x4019A6: is_straight_at (eval.c:170)
==1345==    by 0x4026B2: describe_hand (test-eval.c:49)
==1345==    by 0x402A78: main (test-eval.c:119)
==1345==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1345== 
==1345== 
==1345== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1345==  Access not within mapped region at address 0x0
==1345==    at 0x401901: is_ace_low_straight_at (eval.c:151)
==1345==    by 0x4019A6: is_straight_at (eval.c:170)
==1345==    by 0x4026B2: describe_hand (test-eval.c:49)
==1345==    by 0x402A78: main (test-eval.c:119)
==1345==  If you believe this happened as a result of a stack
==1345==  overflow in your program's main thread (unlikely but
==1345==  possible), you can try to increase the size of the
==1345==  main thread stack using the --main-stacksize= flag.
==1345==  The main thread stack size used in this run was 8388608.
==1345== 
==1345== HEAP SUMMARY:
==1345==     in use at exit: 880 bytes in 17 blocks
==1345==   total heap usage: 426 allocs, 409 frees, 16,552 bytes allocated
==1345== 
==1345== LEAK SUMMARY:
==1345==    definitely lost: 0 bytes in 0 blocks
==1345==    indirectly lost: 0 bytes in 0 blocks
==1345==      possibly lost: 0 bytes in 0 blocks
==1345==    still reachable: 880 bytes in 17 blocks
==1345==         suppressed: 0 bytes in 0 blocks
==1345== Rerun with --leak-check=full to see details of leaked memory
==1345== 
==1345== For counts of detected and suppressed errors, rerun with: -v
==1345== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
